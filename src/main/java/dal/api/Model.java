package dal.api;

import sprouts.Val;

import java.util.function.Consumer;

/**
 *  The bas interface for all property based model types.
 *
 * @param <M> The type of the model.
 */
public interface Model<M>
{
    /**
     *  The id of a model is a regular property like any other model property
     *  except that it is automatically generated by the database and cannot be changed.
     *  It also exposes some additional methods which make it easier to work with.
     *
     * @return The id of this model instance.
     */
    Id id();

    /**
     *  Creates a clone of this model instance.
     *  Just like this model instance, the clone is an eager representation of a database record.
     *  So every property modification will instantly be written to the database.
     *  If you want to batch all your model changes and write them to the database at once,
     *  you can use the {@link #commit(Consumer)} method.
     *
     * @return A clone of this model instance.
     */
    M clone();

    /**
     *  When a model instance is created it is usually a eager representation
     *  of a database record. So every property modification will instantly
     *  be written to the database.
     *  If you want to batch all your model changes and write them to the
     *  database at once, you can use this method, which accepts a transaction lambda
     *  consuming a non-eager model instance as a parameter.
     *  Within the transaction lambda you can modify the model instance as you like.
     *  All changes will be written to the database at once when the transaction lambda
     *  returns. <br>
     *  So an example would look like this:
     *  <pre>{@code
     *    MyModel model = db.select(MyModel.class).where(MyModel::id).is(42).first();
     *    model.commit( m -> {
     *      m.field1().set(42);
     *      m.field2().set("Hello World");
     *    });
     *    // The changes to field1 and field2 are written to the database at once.
     *  }</pre>
     *
     * @param transaction A lambda accepting a non-eager model instance as a parameter.
     */
    void commit( Consumer<M> transaction );

    /**
     *  The id of a model is a regular property like any other model property
     *  except that it is automatically generated by the database and cannot be changed.
     *  It also exposes some additional methods which make it easier to work with the id.
     */
    interface Id extends Val<Integer> {
        default boolean greaterThan(int value) {
            Integer id = orElseNull();
            return id != null && id > value;
        }
        default boolean greaterThanOrEqual(int value) {
            Integer id = orElseNull();
            return id != null && id >= value;
        }
        default boolean lessThan(int value) {
            Integer id = orElseNull();
            return id != null && id < value;
        }
        default boolean lessThanOrEqual(int value) {
            Integer id = orElseNull();
            return id != null && id <= value;
        }
        default boolean between(int min, int max) {
            Integer id = orElseNull();
            return id != null && id >= min && id <= max;
        }
        default boolean notBetween(int min, int max) {
            Integer id = orElseNull();
            return id != null && (id < min || id > max);
        }
    }

}
