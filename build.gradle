plugins {
    id 'groovy'
    id 'java'
    id "com.github.node-gradle.node" version "3.5.1"
}

group 'org.gleethos'
version '0.0.0'
sourceCompatibility = '17'

var REACT_SKIN_LOCATION = 'src/main/web-portal'

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    google()
}

dependencies {

    implementation 'javax.websocket:javax.websocket-api:1.1'
    implementation 'org.eclipse.jetty:jetty-servlet:9.4.29.v20200521'
    implementation 'org.eclipse.jetty.websocket:websocket-server:9.4.50.v20221201'
    implementation 'org.eclipse.jetty:jetty-server:9.4.48.v20220622'

    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.36.0.3'
    implementation group: 'io.github.globaltcad', name: 'swing-tree', version:'0.4.1'

    //implementation 'org.apache.groovy:groovy:3.0.9'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    // Testing with Spock :
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'    // mandatory dependencies for using Spock

    testImplementation 'org.codehaus.groovy:groovy:3.0.9'
    testImplementation platform('org.spockframework:spock-bom:2.1-groovy-3.0')
    testImplementation 'org.spockframework:spock-core:2.1-groovy-3.0'
    testImplementation 'com.athaydes:spock-reports:2.3.2-groovy-3.0'

    implementation 'com.formdev:flatlaf-intellij-themes:2.2'
    implementation 'com.formdev:flatlaf:2.2' // Looks better than regular swing :)
    implementation group: 'com.metsci.ext.com.kitfox.svg', name: 'svg-salamander', version: '0.1.19'

    implementation group: 'org.json', name: 'json', version: '20220924'

    // Command line parsing :
    implementation "com.beust:jcommander:1.82"

    // Logging :
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.5'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.5'

    // if you don't already have slf4j-api and an implementation of it in the classpath, add this! (needed for reports)
    testImplementation 'org.slf4j:slf4j-api:2.0.5'
    testCompileOnly 'org.slf4j:slf4j-simple:2.0.5'

    // Integration test with Geb and Spock :
    testImplementation group: 'org.gebish', name: 'geb-spock', version: '5.1'
    testImplementation group: 'org.seleniumhq.selenium', name: 'selenium-firefox-driver', version: '4.8.0'

}

// Read more about how to configure the plugin from
// https://github.com/srs/gradle-node-plugin/blob/master/docs/node.md
node {
    // Whether to download and install a specific Node.js version or not
    // If false, it will use the globally installed Node.js
    // If true, it will download node using above parameters
    // Note that npm is bundled with Node.js
    download = true

    // Version of node to download and install (only used if download is true)
    // It will be unpacked in the workDir
    version = "19.4.0"

    // Version of npm to use
    // If specified, installs it in the npmWorkDir
    // If empty, the plugin will use the npm command bundled with Node.js
    npmVersion = ""

    // Version of Yarn to use
    // Any Yarn task first installs Yarn in the yarnWorkDir
    // It uses the specified version if defined and the latest version otherwise (by default)
    yarnVersion = ""

    // Base URL for fetching node distributions
    // Only used if download is true
    // Change it if you want to use a mirror
    // Or set to null if you want to add the repository on your own.
    distBaseUrl = "https://nodejs.org/dist"

    // Specifies whether it is acceptable to communicate with the Node.js repository over an insecure HTTP connection.
    // Only used if download is true
    // Change it to true if you use a mirror that uses HTTP rather than HTTPS
    // Or set to null if you want to use Gradle's default behaviour.
    allowInsecureProtocol = null

    // The npm command executed by the npmInstall task
    // By default it is install but it can be changed to ci
    npmInstallCommand = "install"

    // The directory where Node.js is unpacked (when download is true)
    workDir = file("${project.projectDir}/.gradle/nodejs")

    // The directory where npm is installed (when a specific version is defined)
    npmWorkDir = file("${project.projectDir}/.gradle/npm")

    // The directory where yarn is installed (when a Yarn task is used)
    yarnWorkDir = file("${project.projectDir}/.gradle/yarn")

    // The Node.js project directory location
    // This is where the package.json file and node_modules directory are located
    // By default it is at the root of the current project
    nodeProjectDir = file("${project.projectDir}/$REACT_SKIN_LOCATION")

    // Whether the plugin automatically should add the proxy configuration to npm and yarn commands
    // according the proxy configuration defined for Gradle
    // Disable this option if you want to configure the proxy for npm or yarn on your own
    // (in the .npmrc file for instance)
    nodeProxySettings = ProxySettings.SMART
}

// Build the project locally
task appNpmBuild(type: NpmTask) {
    description = "Builds production version of tribee-portal"
    workingDir = file("${project.projectDir}/$REACT_SKIN_LOCATION")
    args = ["run", "build"]
}

// Copies the project to the service folder
task copyWebAppToWebRoot(type: Copy) {
    from "$REACT_SKIN_LOCATION/build"
    into 'src/main/resources/web/.'
}

/*
    Combines build and copy tasks!
    Use this for rebuilding the react frontend
    (rebuild the react app and copy the build folder to the resources folder)
*/
task buildWebApp(type: NpmTask) {
    description = "Builds production version of tribee-portal"
    dependsOn appNpmBuild
    dependsOn copyWebAppToWebRoot
}

appNpmBuild.dependsOn npmInstall
copyWebAppToWebRoot.dependsOn appNpmBuild
compileJava.dependsOn copyWebAppToWebRoot

// A task which starts the 'Main' class of the project with a certain set of arguments
// Note that this is done in a new thread, so the task will finish immediately and we can run other tasks in parallel
task runServer(type: JavaExec) {
    main = 'Main'
    classpath = sourceSets.main.runtimeClasspath
    args = ['--start-server', 'true', '--port', '8080', '--headless', 'true']
}

// A task for executing the react tests:
task appNpmTest(type: NpmTask) { // TODO: Make this depend on the server task!
    description = "Runs the react tests"
    workingDir = file("${project.projectDir}/$REACT_SKIN_LOCATION")
    args = ["run", "test"]
}

test {
    useJUnitPlatform()
}